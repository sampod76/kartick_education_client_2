# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CLIENT

on:
  push:
    branches: ['main']

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 23.x

  #     - name: Check if Yarn is installed
  #       run: |
  #         if ! command -v yarn &> /dev/null; then
  #           echo "Yarn not found, installing..."
  #           npm install -g yarn
  #         else
  #           echo "Yarn is already installed."
  #         fi

  #     - name: Cache Yarn dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.yarn/cache
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-

  #     - name: Clean Install Dependencies
  #       run: yarn install --check-files

  #     - name: Build the project
  #       run: yarn build

  #     - name: Upload build artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: build-output
  #         path: . # Adjust if build output is in a specific folder
  deploy:
    # needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      # 2) Use dorny/paths-filter to detect changes to package.json or yarn.lock
      - name: Detect dependency‐related changes
        id: deps_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dependencies:
              - 'package.json'
              - 'yarn.lock'

      # 3) Set up Node.js and enable caching for yarn
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.x
          cache: 'yarn'
          # The cache key automatically uses the contents of package.json + yarn.lock,
          # so when those haven’t changed, yarn install will restore from cache.

      # 4) Install dependencies only if package.json or yarn.lock changed this push
      - name: Install Dependencies
        # if: steps.deps_changes.outputs.dependencies == 'true'
        run: yarn install

      # 5) Build the project (you probably want to build even if deps didn’t change—
      #    else guard this too if, for example, only code changes should trigger a build)
      - name: Build the Project
        run: yarn build
      - name: Check if education-client is running and restart or start accordingly
        run: |
          # Check if the process is running
          if pm2 list | grep -q "education-client"; then
            echo "education-client is already running, restarting it..."
            pm2 restart education-client
          else
            echo "education-client is not running, starting it..."
            pm2 start ecosystem.config.js --env production
          fi
